Making a smartcontract lottery

Drafting:
1. Raffle
2. Enter the lottery (By paying some amount)
3. Pick a random winner (verifiably random)
4. Winner is selected ever X minutes -> Automate this process
5. Use Chainlink oracle -> Verifiably random, Automate execution (chainlink keepers)

Notes:
Going more into depth about Chainlink VRF v2 and Chainlink Keepers.
Learning how to use VRF

IMPORT CHAINLINK/CONTRACTS steps:
- To import a git repo, like with Chainlink, use the npm commmand and you can now use
the functions that are a part of that repository:

npm add --include @chainlink/contracts

- Then we add the chainlink contract to our Raffle.sol and use the VRFConsumerBaseV2 
abstract contract to gain access to our ability to get a random number function.

** Run this command to be sure the contract compile correctly : npx hardhat compile 


The requestRandomWords() from the VRFConsumerBaseV2 contract :
function requestRandomWords()
        external
        onlyOwner
        returns (uint256 requestId)
    {
        // Will revert if subscription is not set and funded.
        requestId = COORDINATOR.requestRandomWords(
            keyHash,
            s_subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
        s_requests[requestId] = RequestStatus({
            randomWords: new uint256[](0),
            exists: true,
            fulfilled: false
        });
        requestIds.push(requestId);
        lastRequestId = requestId;
        emit RequestSent(requestId, numWords);
        return requestId;
    }

- View this function rewritten in Raffle.sol


LEARNING CHAINLINK KEEPERS

We need a check upkeep and perform upkeep function for our contract.

CheckUpKeepFunction() = checks to see if it is time to get a random number to update the recent winner and send them the funds

For the import, the location changed for KeepersCompatibleInterface. It is located under @chainlink/contracts/src/v0.8/automation/interfaces/KeepersCompatibleInterface.sol

When getting a timestamp, Solidity has a built in tool. `block.timestamp`


OTHER Notes

If variable is a constant, when making a getter that is associated with it, you have to say `pure` instead of `view`. view is used with state variables.


DEPLOYING RAFFLE.SOL

Refresh how to set up automated deployments.

Set up the deploy scripts. Will need to update hardhat.config.js and need to create a helper-hardhat-config.js. 

We need to set up a mock for VRFCoordinator under the contracts folder and make a test folder to import the mock that Chainlink has prepared.

Compile the contracts to make sure everything compiles fine. 

CONTINUED

Now we need to fill in all the args for the constructor. We have to feed it the address for vrfCoordinatorV2. Then we have to give it a uint256 for entranceFee, 

NOW WE NEED TO GIVE IT A GASLANE (Left off at)

Left off at 15:12:01